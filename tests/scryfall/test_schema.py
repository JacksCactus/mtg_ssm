"""Tests for scrypy.schema."""

import datetime as dt
import decimal
from typing import Any
from typing import Dict
import uuid

import marshmallow.exceptions
import pytest

from mtg_ssm.scryfall import models
from mtg_ssm.scryfall import schema

SERDE_TESTS = [
    pytest.param(
        {
            "object": "list",
            "has_more": False,
            "data": (
                {
                    "object": "list",
                    "has_more": True,
                    "next_page": "https://example.com/page2",
                    "total_cards": 3,
                    "warnings": ("warn",),
                    "data": (),
                },
            ),
        },
        models.ScryObjectList(
            has_more=False,
            next_page=None,
            total_cards=None,
            warnings=None,
            data=(
                models.ScryObjectList(
                    has_more=True,
                    next_page=models.URI("https://example.com/page2"),
                    total_cards=3,
                    warnings=("warn",),
                    data=(),
                ),
            ),
        ),
        id="list",
    ),
    pytest.param(
        {
            "object": "set",
            "id": "00000000-0000-0000-0000-000000000002",
            "code": "cset",
            "mtgo_code": "mtgocset",
            "arena_code": "arenacset",
            "tcgplayer_id": 2,
            "name": "Test Set",
            "set_type": "funny",
            "released_at": "2018-04-03",
            "block_code": "tst",
            "block": "Test Block",
            "parent_set_code": "cprnt",
            "card_count": 5,
            "digital": False,
            "foil_only": True,
            "nonfoil_only": False,
            "icon_svg_uri": "https://example.com/cset_image.svg",
            "search_uri": "https://example.com/search/set/cset",
            "scryfall_uri": "https://example.com/set/cset",
            "uri": "https://example.com/cset",
        },
        models.ScrySet(
            id=uuid.UUID(int=2),
            code="cset",
            mtgo_code="mtgocset",
            arena_code="arenacset",
            tcgplayer_id=2,
            name="Test Set",
            set_type=models.ScrySetType.FUNNY,
            released_at=dt.date(2018, 4, 3),
            block_code="tst",
            block="Test Block",
            parent_set_code="cprnt",
            card_count=5,
            printed_size=5,
            digital=False,
            foil_only=True,
            nonfoil_only=False,
            icon_svg_uri=models.URI("https://example.com/cset_image.svg"),
            search_uri=models.URI("https://example.com/search/set/cset"),
            scryfall_uri=models.URI("https://example.com/set/cset"),
            uri=models.URI("https://example.com/cset"),
        ),
        id="set",
    ),
    pytest.param(
        {
            "object": "set",
            "id": "00000000-0000-0000-0000-000000000002",
            "code": "cset2",
            "name": "Test Set 2",
            "set_type": "promo",
            "card_count": 6,
            "digital": True,
            "foil_only": False,
            "icon_svg_uri": "https://example.com/cset2_image.svg",
            "search_uri": "https://example.com/search/set/cset2",
            "scryfall_uri": "https://example.com/set/cset2",
            "uri": "https://example.com/cset2",
        },
        models.ScrySet(
            id=uuid.UUID(int=2),
            code="cset2",
            mtgo_code=None,
            arena_code=None,
            tcgplayer_id=None,
            name="Test Set 2",
            set_type=models.ScrySetType.PROMO,
            released_at=None,
            block_code=None,
            block=None,
            parent_set_code=None,
            card_count=6,
            digital=True,
            foil_only=False,
            nonfoil_only=None,
            icon_svg_uri=models.URI("https://example.com/cset2_image.svg"),
            search_uri=models.URI("https://example.com/search/set/cset2"),
            scryfall_uri=models.URI("https://example.com/set/cset2"),
            uri=models.URI("https://example.com/cset2"),
        ),
        id="set-nulls",
    ),
    pytest.param(
        {
            "object": "related_card",
            "id": "00000000-0000-0000-0000-000000000003",
            "component": "something",
            "name": "some_related",
            "type_line": "Thing — Such",
            "uri": "https://example.com/related-card",
        },
        models.ScryRelatedCard(
            id=uuid.UUID(int=3),
            component="something",
            name="some_related",
            type_line="Thing — Such",
            uri=models.URI("https://example.com/related-card"),
        ),
        id="related_card",
    ),
    pytest.param(
        {
            "object": "card_face",
            "artist": "Somebody",
            "artist_id": "00000000-0000-0000-0000-000000000009",
            "color_indicator": ("W", "B"),
            "colors": ("G", "R"),
            "flavor_text": "flavorful words",
            "illustration_id": "00000000-0000-0000-0000-000000000004",
            "image_uris": {
                "imgone": "https://example.com/face1.jpg",
                "imgtwo": "https://example.com/face2.jpg",
            },
            "loyalty": "X",
            "mana_cost": "{X}{W}{U}{U}",
            "name": "A card",
            "oracle_text": "Do some stuff",
            "power": "1+*",
            "printed_name": "Acard",
            "printed_text": "Really do some stuff",
            "printed_type_line": "Thing — really stuff",
            "toughness": "2+*",
            "type_line": "Thing — stuff",
            "watermark": "Very",
        },
        models.ScryCardFace(
            artist="Somebody",
            artist_id=uuid.UUID(int=9),
            color_indicator=(models.ScryColor.WHITE, models.ScryColor.BLACK),
            colors=(models.ScryColor.GREEN, models.ScryColor.RED),
            flavor_text="flavorful words",
            illustration_id=uuid.UUID(int=4),
            image_uris={
                "imgone": models.URI("https://example.com/face1.jpg"),
                "imgtwo": models.URI("https://example.com/face2.jpg"),
            },
            loyalty="X",
            mana_cost="{X}{W}{U}{U}",
            name="A card",
            oracle_text="Do some stuff",
            power="1+*",
            printed_name="Acard",
            printed_text="Really do some stuff",
            printed_type_line="Thing — really stuff",
            toughness="2+*",
            type_line="Thing — stuff",
            watermark="Very",
        ),
        id="card_face",
    ),
    pytest.param(
        {
            "object": "card_face",
            "mana_cost": "{X}{W}{U}{U}",
            "name": "A card",
            "type_line": "Thing — stuff",
        },
        models.ScryCardFace(
            artist=None,
            artist_id=None,
            color_indicator=None,
            colors=None,
            flavor_text=None,
            illustration_id=None,
            image_uris=None,
            loyalty=None,
            mana_cost="{X}{W}{U}{U}",
            name="A card",
            oracle_text=None,
            power=None,
            printed_name=None,
            printed_text=None,
            printed_type_line=None,
            toughness=None,
            type_line="Thing — stuff",
            watermark=None,
        ),
        id="card_face-nulls",
    ),
    pytest.param(
        {
            "object": "card",
            "arena_id": 1,
            "id": "00000000-0000-0000-0000-000000000005",
            "lang": "en",
            "mtgo_id": 7,
            "mtgo_foil_id": 8,
            "multiverse_ids": (123, 456),
            "tcgplayer_id": 9,
            cardmarket_id=42,
            "oracle_id": "00000000-0000-0000-0000-000000000006",
            "prints_search_uri": "https://example.com/find/mycard",
            "rulings_uri": "https://example.com/rulings/mycard",
            "scryfall_uri": "https://example.com/scryfall/mycard",
            "uri": "https://example.com/mycard",
            "all_parts": (
                {
                    "object": "related_card",
                    "id": "00000000-0000-0000-0000-000000000007",
                    "component": "other",
                    "name": "othercard",
                    "type_line": "Some — Other",
                    "uri": "https://exmaple.com/othercard",
                },
            ),
            "card_faces": (
                {
                    "object": "card_face",
                    "mana_cost": "{X}",
                    "name": "A front",
                    "type_line": "Card — Front",
                },
            ),
            "cmc": "1.5",
            "colors": ("U", "B"),
            "color_identity": ("G", "W"),
            "color_indicator": ("R",),
            "edhrec_rank": 10,
            "foil": True,
            "hand_modifier": "-2",
            "keywords": ("Flying", "First Strike"),
            "layout": "saga",
            "legalities": {"vintage": "restricted", "legacy": "legal"},
            "life_modifier": "+2",
            "loyalty": "3",
            "mana_cost": "{X}",
            "name": "Some card",
            "nonfoil": False,
            "oracle_text": "Do a thing",
            "oversized": True,
            "power": "X",
            "produced_mana": ("C", "R"),
            "reserved": False,
            "toughness": "Y",
            "type_line": "Card — Stuff",
            "artist": "Some person",
            "artist_ids": ("00000000-0000-0000-0000-00000000000c",),
            "booster": True,
            "border_color": "gold",
            "card_back_id": "00000000-0000-0000-0000-000000000012",
            "collector_number": "107★",
            "content_warning": False,
            "digital": False,
            "flavor_text": "I am a card",
            "flavor_name": "The Bombast",
            "frame_effect": "miracle",
            "frame_effects": ("miracle",),
            "frame": "1993",
            "full_art": True,
            "games": ("mtgo", "paper"),
            "highres_image": True,
            "illustration_id": "00000000-0000-0000-0000-000000000008",
            "image_uris": {"animage": "https://example.com/somecard"},
            "prices": {"usd": "0.83", "usd_foil": None},
            "printed_name": "Some-card",
            "printed_text": "Do da thing",
            "printed_type_line": "Card — Stuffs",
            "promo": True,
            "promo_types": ("promo1",),
            "purchase_uris": {"store": "https://example.com/buysomecard"},
            "rarity": "mythic",
            "related_uris": {"other": "https://example.com/othersomecard"},
            "released_at": "2016-02-04",
            "reprint": False,
            "scryfall_set_uri": "https://example.com/scry/somecard",
            "set_name": "A card set",
            "set_search_uri": "https://example.com/acs/somecard",
            "set_type": "someset",
            "set_uri": "https://example.com/sets/acs",
            "set": "acs",
            "story_spotlight": True,
            "textless": True,
            "variation": True,
            "variation_of": "00000000-0000-0000-0000-00000000001d",
            "watermark": "Shiny",
            "preview": {
                "source": "me",
                "source_uri": "not a good value",
                "previewed_at": "2019-09-10",
            },
        },
        models.ScryCard(
            arena_id=1,
            id=uuid.UUID(int=5),
            lang="en",
            mtgo_id=7,
            mtgo_foil_id=8,
            multiverse_ids=(123, 456),
            tcgplayer_id=9,
            oracle_id=uuid.UUID(int=6),
            prints_search_uri=models.URI("https://example.com/find/mycard"),
            rulings_uri=models.URI("https://example.com/rulings/mycard"),
            scryfall_uri=models.URI("https://example.com/scryfall/mycard"),
            uri=models.URI("https://example.com/mycard"),
            all_parts=(
                models.ScryRelatedCard(
                    id=uuid.UUID(int=7),
                    component="other",
                    name="othercard",
                    type_line="Some — Other",
                    uri=models.URI("https://exmaple.com/othercard"),
                ),
            ),
            card_faces=(
                models.ScryCardFace(
                    artist=None,
                    artist_id=None,
                    color_indicator=None,
                    colors=None,
                    flavor_text=None,
                    illustration_id=None,
                    image_uris=None,
                    loyalty=None,
                    mana_cost="{X}",
                    name="A front",
                    oracle_text=None,
                    power=None,
                    printed_name=None,
                    printed_text=None,
                    printed_type_line=None,
                    toughness=None,
                    type_line="Card — Front",
                    watermark=None,
                ),
            ),
            cmc=decimal.Decimal("1.5"),
            colors=(models.ScryColor.BLUE, models.ScryColor.BLACK),
            color_identity=(models.ScryColor.GREEN, models.ScryColor.WHITE),
            color_indicator=(models.ScryColor.RED,),
            edhrec_rank=10,
            foil=True,
            hand_modifier="-2",
            keywords=("Flying", "First Strike"),
            layout=models.ScryCardLayout.SAGA,
            legalities={
                models.ScryFormat.VINTAGE: models.ScryLegality.RESTRICTED,
                models.ScryFormat.LEGACY: models.ScryLegality.LEGAL,
            },
            life_modifier="+2",
            loyalty="3",
            mana_cost="{X}",
            name="Some card",
            nonfoil=False,
            oracle_text="Do a thing",
            oversized=True,
            power="X",
            produced_mana=(models.ScryColor.COLORLESS, models.ScryColor.RED),
            reserved=False,
            toughness="Y",
            type_line="Card — Stuff",
            artist="Some person",
            artist_ids=(uuid.UUID(int=12),),
            booster=True,
            border_color=models.ScryBorderColor.GOLD,
            card_back_id=uuid.UUID(int=18),
            collector_number="107★",
            content_warning=False,
            digital=False,
            flavor_text="I am a card",
            flavor_name="The Bombast",
            frame_effect=models.ScryFrameEffect.MIRACLE,
            frame_effects=(models.ScryFrameEffect.MIRACLE,),
            frame=models.ScryCardFrame.Y1993,
            full_art=True,
            games=(models.ScryGame.MTGO, models.ScryGame.PAPER),
            highres_image=True,
            illustration_id=uuid.UUID(int=8),
            image_uris={"animage": models.URI("https://example.com/somecard")},
            prices={"usd": decimal.Decimal("0.83"), "usd_foil": None},
            printed_name="Some-card",
            printed_text="Do da thing",
            printed_type_line="Card — Stuffs",
            promo=True,
            promo_types=("promo1",),
            purchase_uris={"store": models.URI("https://example.com/buysomecard")},
            rarity=models.ScryRarity.MYTHIC,
            related_uris={"other": models.URI("https://example.com/othersomecard")},
            released_at=dt.date(2016, 2, 4),
            reprint=False,
            scryfall_set_uri=models.URI("https://example.com/scry/somecard"),
            set_name="A card set",
            set_search_uri=models.URI("https://example.com/acs/somecard"),
            set_type="someset",
            set_uri=models.URI("https://example.com/sets/acs"),
            set="acs",
            story_spotlight=True,
            textless=True,
            variation=True,
            variation_of=uuid.UUID(int=29),
            watermark="Shiny",
            preview=models.CardPreviewBlock(
                source="me",
                source_uri="not a good value",
                previewed_at=dt.date(2019, 9, 10),
            ),
        ),
        id="card",
    ),
    pytest.param(
        {
            "object": "card",
            "id": "00000000-0000-0000-0000-000000000009",
            "lang": "en",
            "oracle_id": "00000000-0000-0000-0000-00000000000a",
            "prints_search_uri": "https://example.com/find/mycard",
            "rulings_uri": "https://example.com/rulings/mycard",
            "scryfall_uri": "https://example.com/scryfall/mycard",
            "uri": "https://example.com/mycard",
            "cmc": "1.5",
            "color_identity": (),
            "foil": True,
            "keywords": (),
            "layout": "saga",
            "legalities": {},
            "name": "Some card",
            "nonfoil": False,
            "oversized": True,
            "reserved": False,
            "booster": False,
            "border_color": "gold",
            "card_back_id": "00000000-0000-0000-0000-000000000016",
            "collector_number": "107★",
            "digital": False,
            "frame": "1993",
            "full_art": True,
            "games": (),
            "highres_image": True,
            "promo": True,
            "rarity": "mythic",
            "released_at": "2016-02-04",
            "reprint": False,
            "scryfall_set_uri": "https://example.com/scry/somecard",
            "set_name": "A card set",
            "set_search_uri": "https://example.com/acs/somecard",
            "set_uri": "https://example.com/sets/acs",
            "set_type": "settype",
            "set": "acs",
            "story_spotlight": True,
            "textless": False,
            "variation": False,
        },
        models.ScryCard(
            arena_id=None,
            id=uuid.UUID(int=9),
            lang="en",
            mtgo_id=None,
            mtgo_foil_id=None,
            multiverse_ids=None,
            tcgplayer_id=None,
            oracle_id=uuid.UUID(int=10),
            prints_search_uri=models.URI("https://example.com/find/mycard"),
            rulings_uri=models.URI("https://example.com/rulings/mycard"),
            scryfall_uri=models.URI("https://example.com/scryfall/mycard"),
            uri=models.URI("https://example.com/mycard"),
            all_parts=None,
            card_faces=None,
            cmc=decimal.Decimal("1.5"),
            colors=None,
            color_identity=(),
            color_indicator=None,
            edhrec_rank=None,
            foil=True,
            hand_modifier=None,
            keywords=(),
            layout=models.ScryCardLayout.SAGA,
            legalities={},
            life_modifier=None,
            loyalty=None,
            mana_cost=None,
            name="Some card",
            nonfoil=False,
            oracle_text=None,
            oversized=True,
            power=None,
            produced_mana=None,
            reserved=False,
            toughness=None,
            type_line=None,
            artist=None,
            artist_ids=None,
            booster=False,
            border_color=models.ScryBorderColor.GOLD,
            card_back_id=uuid.UUID(int=22),
            collector_number="107★",
            content_warning=None,
            digital=False,
            flavor_text=None,
            flavor_name=None,
            frame_effect=None,
            frame_effects=None,
            frame=models.ScryCardFrame.Y1993,
            full_art=True,
            games=(),
            highres_image=True,
            illustration_id=None,
            image_uris=None,
            prices=None,
            printed_name=None,
            printed_text=None,
            printed_type_line=None,
            promo=True,
            promo_types=None,
            purchase_uris=None,
            rarity=models.ScryRarity.MYTHIC,
            related_uris=None,
            released_at=dt.date(2016, 2, 4),
            reprint=False,
            scryfall_set_uri=models.URI("https://example.com/scry/somecard"),
            set_name="A card set",
            set_search_uri=models.URI("https://example.com/acs/somecard"),
            set_uri=models.URI("https://example.com/sets/acs"),
            set_type="settype",
            set="acs",
            story_spotlight=True,
            textless=False,
            variation=False,
            variation_of=None,
            watermark=None,
            preview=None,
        ),
        id="card-nulls",
    ),
    pytest.param(
        {
            "object": "bulk_data",
            "id": "00000000-0000-0000-0000-00000000000b",
            "uri": "https://example.com/bulk/some_cards",
            "type": "cards",
            "name": "somecards",
            "description": "some cards",
            "download_uri": "https://example.com/bulk/some_cards/xyz",
            "updated_at": "2019-02-10T10:09:04.174000+00:00",
            "compressed_size": 300,
            "content_type": "application/json",
            "content_encoding": "gzip",
        },
        models.ScryBulkData(
            id=uuid.UUID(int=11),
            uri=models.URI("https://example.com/bulk/some_cards"),
            type="cards",
            name="somecards",
            description="some cards",
            download_uri=models.URI("https://example.com/bulk/some_cards/xyz"),
            updated_at=dt.datetime(
                2019, 2, 10, 10, 9, 4, 174000, tzinfo=dt.timezone.utc
            ),
            compressed_size=300,
            content_type="application/json",
            content_encoding="gzip",
        ),
        id="bulk_data",
    ),
]

DESERIALIZE_TESTS = SERDE_TESTS + [
    pytest.param(
        {"object": "list", "has_more": False, "data": (), "extra": "invalid"},
        None,
        marks=pytest.mark.xfail(raises=marshmallow.exceptions.ValidationError),
        id="single unknown",
    ),
    pytest.param(
        {
            "object": "card",
            "id": "00000000-0000-0000-0000-000000000009",
            "lang": "en",
            "oracle_id": "00000000-0000-0000-0000-00000000000a",
            "prints_search_uri": "https://example.com/find/mycard",
            "rulings_uri": "https://example.com/rulings/mycard",
            "scryfall_uri": "https://example.com/scryfall/mycard",
            "uri": "https://example.com/mycard",
            "all_parts": (
                {
                    "object": "related_card",
                    "id": "00000000-0000-0000-0000-000000000007",
                    "component": "other",
                    "name": "othercard",
                    "type_line": "Some — Other",
                    "uri": "https://exmaple.com/othercard",
                    "extra": "invalid",
                },
                {
                    "object": "related_card",
                    "id": "00000000-0000-0000-0000-000000000008",
                    "component": "other",
                    "name": "othercard",
                    "type_line": "Some — Other",
                    "uri": "https://exmaple.com/othercard",
                    "extra2": "invalid2",
                },
            ),
            "cmc": "1.5",
            "color_identity": (),
            "foil": True,
            "layout": "saga",
            "legalities": {},
            "name": "Some card",
            "nonfoil": False,
            "oversized": True,
            "reserved": False,
            "border_color": "gold",
            "collector_number": "107★",
            "digital": False,
            "frame_effect": "miracle",
            "frame": "1993",
            "full_art": True,
            "games": (),
            "highres_image": True,
            "promo": True,
            "rarity": "mythic",
            "released_at": "2016-02-04",
            "reprint": False,
            "scryfall_set_uri": "https://example.com/scry/somecard",
            "set_name": "A card set",
            "set_search_uri": "https://example.com/acs/somecard",
            "set_uri": "https://example.com/sets/acs",
            "set": "acs",
            "story_spotlight": True,
        },
        None,
        marks=pytest.mark.xfail(raises=marshmallow.exceptions.ValidationError),
        id="multiple unknown",
    ),
]

SERIALIZE_TESTS = SERDE_TESTS


@pytest.mark.parametrize("payload, obj", DESERIALIZE_TESTS)
def test_load(payload: Dict[str, Any], obj: models.ScryObject) -> None:
    assert schema.ScryfallUberSchema().load(payload).data == obj


@pytest.mark.parametrize("payload, obj", SERIALIZE_TESTS)
def test_dump(payload: Dict[str, Any], obj: models.ScryObject) -> None:
    assert schema.ScryfallUberSchema().dump(obj).data == payload
